{
  "author": {
    "name": "Jorge Bay",
    "email": "jorgebaygondra@gmail.com"
  },
  "contributors": [
    {
      "name": "Andrew Kish"
    }
  ],
  "name": "node-cassandra-cql",
  "version": "0.2.2-1",
  "description": "Node.js CQL driver for Apache Cassandra native protocol",
  "keywords": [
    "cassandra",
    "cql",
    "cql3",
    "connection",
    "pool"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jorgebay/node-cassandra-cql/raw/master/LICENSE.txt"
    }
  ],
  "dependencies": {
    "async": ">= 0.1.12",
    "node-int64": ">= 0.3.0",
    "node-uuid": "1.4.0"
  },
  "devDependencies": {
    "nodeunit": ">= 0.8.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jorgebay/node-cassandra-cql.git"
  },
  "bugs": {
    "url": "https://github.com/jorgebay/node-cassandra-cql/issues"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "readme": "## Node.js CQL Driver for Apache Cassandra\n\nnode-cassandra-cql is a Node.js CQL driver for [Apache Cassandra](http://cassandra.apache.org/)'s native protocol with a small dependency tree written in pure javascript.\n\n\n## Installation\n\n    $ npm install node-cassandra-cql\n\n## Features\n- Connection pooling to multiple hosts\n- Parameters in queries (even for sets/lists/maps collections)\n- Plain Old Javascript: no need to generate thrift files\n- Get cell by column name: `row.get('first_name')`\n- Bigints (using [node-int64](https://github.com/broofa/node-int64)) and uuid support\n- Prepared statements\n\n## Using it\n```javascript\n// Creating a new connection pool to multiple hosts.\nvar Client = require('node-cassandra-cql').Client;\nvar hosts = ['host1:9042', 'host2:9042', 'host3', 'host4'];\nvar client = new Client({hosts: hosts, keyspace: 'Keyspace1'});\n```\nClient() accepts an object with these slots, only `hosts` is required:\n```\n                hosts: String list in host:port format. Port is optional (defaults to 9042).\n             keyspace: Name of keyspace to use.\n             username: User for authentication.\n             password: Password for authentication.\n              version: Currently only '3.0.0' is supported.\n            staleTime: Time in milliseconds before trying to reconnect.\n    maxExecuteRetries: Maximum amount of times an execute can be retried\n                       using another connection, in case the server is unhealthy.\ngetAConnectionTimeout: Maximum time in milliseconds to wait for a connection from the pool.\n```\nQueries are performed using the `execute()` method. For example:\n```javascript\n// Reading\nclient.execute('SELECT key, email, last_name FROM user_profiles WHERE key=?', ['jbay'],\n  function(err, result) {\n    if (err) console.log('execute failed');\n    else console.log('got user profile with email ' + result.rows[0].get('email'));\n  }\n);\n\n// Writing\nclient.execute('UPDATE user_profiles SET birth=? WHERE key=?', [new Date(1950, 5, 1), 'jbay'], \n  types.consistencies.quorum,\n  function(err) {\n    if (err) console.log(\"failure\");\n    else console.log(\"success\");\n  }\n);\n```\n`execute()` and `executeAsPrepared()` accept the following arguments\n\n        cqlQuery : The cql query to execute, with ? as parameters\n        arguments: Array of arguments that will replace the ? placeholders. Optional.\n     consistency : The level of consistency. Optional, defaults to quorum.\n        callback : The callback function with 2 arguments: err and result\n\n```javascript\n// Shutting down a pool\ncqlClient.shutdown(function() { console.log(\"connection pool shutdown\"); });\n```\n\n### API\n#### Client\n- `execute(query, args, consistency, callback)`   \nExecutes a CQL query.\n- `executeAsPrepared(query, args, consistency, callback)`   \nPrepares (once) and executes the prepared query.\n- `shutdown(callback)`   \nShutdowns the pool (normally it would be called once in your app lifetime).\n\n`execute()` and `executeAsPrepared()` accepts the following arguments\n```\n   query:       The cql query to execute, with ? as parameters\n   arguments:   Array of arguments that will replace the ? placeholders. Optional.\n   consistency: The level of consistency. Optional, defaults to quorum.\n   callback:    The callback function with 2 arguments: err and result\n```\n\n#### Connection\n- `open(callback)`   \nEstablishes a connection, authenticates and sets a keyspace.\n- `close(callback)`   \nCloses the connection.\n- `execute(query, args, consistency, callback)`   \nExecutes a CQL query.\n- `prepare(query, callback)`   \nPrepares a CQL query.\n- `executePrepared(queryId, args, consistency, callback)`   \nExecutes a previously prepared query (determined by the queryId).\n\n\n### Connections\nThe `Client` maintains a pool of opened connections to the hosts to avoid several time-consuming steps that are involed with the set up of a CQL binary protocol connection (socket connection, startup message, authentication, ...).\n\nIf you want to get lower level fine-grained control you could use the `Connection` class.\n```javascript\nvar Connection = require('node-cassandra-cql').Connection;\nvar con = new Connection({host:'host1', port:9042, username:'cassandra', password:'cassandra'});\ncon.open(function(err) {\n  if(err) {\n    console.error(err);\n  }\n  else {\n    var query = 'SELECT key, email, last_name FROM user_profiles WHERE key=?';\n    con.execute(query, ['jbay'], function(err, result){\n      if (err) console.log('execute failed');\n      else console.log('got user profile with email ' + result.rows[0].get('email'));\n      con.close();\n    });\n  }\n});\n```\n\n### Logging\n\nInstances of `Client()` and `Connection()` are `EventEmitter`'s and emit `log` events:\n```javascript\nvar Connection = require('node-cassandra-cql').Connection;\nvar con = new Connection({host:'host1', port:9042, keyspace:'Keyspace1'});\ncon.on('log', function(level, message) {\n  console.log('log event: %s -- %j', level, message);\n});\n```\nThe `level` being passed to the listener can be `info` or `error`.\n\n### Data types\n\nCassandra's bigint data types are parsed as [int64](https://github.com/broofa/node-int64).\n\nList / Set datatypes are encoded from / decoded to Javascript Arrays.\n\nMap datatype are encoded from / decoded to Javascript objects with keys as props.\n\nDecimal and Varint are not parsed yet, they are yielded as byte Buffers.\n\n\n## License\n\nnode-cassandra-cql is distributed under the [MIT license](http://opensource.org/licenses/MIT).\n\n## Contributions\n\nFeel free to join in if you feel like helping this project progress!\n\n## Acknowledgements\n\nFrameReader and FrameWriter are based on [node-cql3](https://github.com/isaacbwagner/node-cql3)'s FrameBuilder and FrameParser.\n",
  "readmeFilename": "README.md",
  "_id": "node-cassandra-cql@0.2.2-1",
  "dist": {
    "shasum": "db302da7eff2b140501c970f310577323ee9ade8"
  },
  "_from": "node-cassandra-cql@0.2.2-1",
  "_resolved": "https://registry.npmjs.org/node-cassandra-cql/-/node-cassandra-cql-0.2.2-1.tgz"
}
